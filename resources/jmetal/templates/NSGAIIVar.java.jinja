import java.io.IOException;
import java.util.List;
import java.util.Arrays;
import java.util.Comparator;
import org.uma.jmetal.component.algorithm.EvolutionaryAlgorithm;
import org.uma.jmetal.component.catalogue.common.solutionscreation.SolutionsCreation;
import org.uma.jmetal.component.catalogue.common.solutionscreation.impl.{{SolutionCreation}};
import org.uma.jmetal.component.catalogue.common.evaluation.Evaluation;
import org.uma.jmetal.component.catalogue.common.evaluation.impl.{{EvaluationType}};
import org.uma.jmetal.component.catalogue.common.termination.Termination;
import org.uma.jmetal.component.catalogue.common.termination.impl.{{Termination}};
import org.uma.jmetal.component.catalogue.ea.replacement.Replacement;
import org.uma.jmetal.component.catalogue.ea.replacement.impl.RankingAndDensityEstimatorReplacement;
import org.uma.jmetal.component.catalogue.ea.selection.Selection;
import org.uma.jmetal.component.catalogue.ea.selection.impl.{{Selection}};
import org.uma.jmetal.component.catalogue.ea.variation.Variation;
import org.uma.jmetal.component.catalogue.ea.variation.impl.{{VariationType}};
import org.uma.jmetal.operator.crossover.impl.{{CrossoverType}};
import org.uma.jmetal.operator.mutation.impl.{{MutationType}};
import org.uma.jmetal.problem.Problem;
import org.uma.jmetal.problem.ProblemFactory;
import org.uma.jmetal.solution.Solution;
{% if DoubleSolution %}
import org.uma.jmetal.solution.doublesolution.DoubleSolution;
{% endif %}
import org.uma.jmetal.util.comparator.MultiComparator;
import org.uma.jmetal.util.densityestimator.DensityEstimator;
import org.uma.jmetal.util.densityestimator.impl.{{DensityEstimator}};
import org.uma.jmetal.util.ranking.Ranking;
import org.uma.jmetal.util.ranking.impl.{{Ranking}};
import org.uma.jmetal.util.JMetalLogger;
import org.uma.jmetal.util.errorchecking.JMetalException;
import org.uma.jmetal.util.fileoutput.SolutionListOutput;
import org.uma.jmetal.util.fileoutput.impl.DefaultFileOutputContext;
import org.uma.jmetal.util.pseudorandom.JMetalRandom;
import org.uma.jmetal.util.SolutionListUtils;
import org.uma.jmetal.util.VectorUtils;
import org.uma.jmetal.qualityindicator.QualityIndicatorUtils;


public class {{Filename}} {

  public static void main(String[] args) throws JMetalException, IOException {
    // Problem configuration
    String problemName = "{{ProblemName}}";
    String referenceParetoFront = "{{ReferenceParetoFront}}";

    Problem<DoubleSolution> problem = ProblemFactory.<DoubleSolution>loadProblem(problemName);

    // Algorithm configuration
    String algorithmName = "{{AlgorithmName}}";

    // Configure initial population creation
    int populationSize = {{PopulationSize}};
    SolutionsCreation<{{SolutionType}}> createInitialPopulation = new {{SolutionCreation}}<>(problem, populationSize);

    // Configure evaluation
    Evaluation<{{SolutionType}}> evaluation = new {{EvaluationType}}<>(problem);

    // Configure termination condition
    {% if TerminationByComputingTime %}
    Termination termination = new TerminationByComputingTime({{MaxComputingTime}});
    {% elif TerminationByKeyboard %}
    Termination termination = new TerminationByKeyboard();
    {% elif TerminationByQualityIndicator %}
    Termination termination = new TerminationByQualityIndicator(..., ..., {{Percentage}}, {{EvaluationsLimit}});  // To be completed.
    {% else %}
    Termination termination = new TerminationByEvaluations({{MaxNumberOfEvaluations}});
    {% endif %}

    // Configure the crossover operator
    double crossoverProbability = {{CrossoverProbability}};
    {{CrossoverType}} crossover = new {{CrossoverType}}(crossoverProbability);
    {% if CrossoverDistributionIndex %}
    crossover.distributionIndex({{CrossoverDistributionIndex}});
    {% endif %}
    {% if BLXAlphaValue %}
    crossover.alpha({{BLXAlphaValue}});
    {% endif %}

    // Configure the mutation operator
    double mutationProbability = {{MutationProbability}} / problem.numberOfVariables();
    {{MutationType}} mutation = new {{MutationType}}(mutationProbability);
    {% if MutationDistributionIndex %}
    mutation.setDistributionIndex({{MutationDistributionIndex}});
    {% endif %}
    {% if MutationPerturbation %}
    mutation.setPerturbation({{MutationPerturbation}});
    {% endif %}

    // Configure replacement
    Ranking<{{SolutionType}}> ranking = new {{Ranking}}<>();
    DensityEstimator<{{SolutionType}}> densityEstimator = new {{DensityEstimator}}<>();
    Replacement<{{SolutionType}}> replacement = new RankingAndDensityEstimatorReplacement<>(ranking, densityEstimator, Replacement.RemovalPolicy.ONE_SHOT);

    // Configure variation
    int offspringPopulationSize = {{OffspringPopulationSize}};
    Variation<{{SolutionType}}> variation = new {{VariationType}}<>(offspringPopulationSize, crossover, mutation);

    // Configure selection operator
    int tournamentSize = {{TournamentSize}};
    Selection<{{SolutionType}}> selection = new {{Selection}}<>(
            tournamentSize,
            variation.getMatingPoolSize(),
            new MultiComparator<>(
                Arrays.asList(
                    Comparator.comparing(ranking::getRank),
                    Comparator.comparing(densityEstimator::value).reversed())));

    EvolutionaryAlgorithm<DoubleSolution> nsgaii = new EvolutionaryAlgorithm<>(
      algorithmName, 
      createInitialPopulation, 
      evaluation, 
      termination,
      selection, 
      variation, 
      replacement);

    // Run the algorithm
    nsgaii.run();

    List<DoubleSolution> population = nsgaii.result();
    JMetalLogger.logger.info("Total execution time : " + nsgaii.totalComputingTime() + "ms");
    JMetalLogger.logger.info("Number of evaluations: " + nsgaii.numberOfEvaluations() + "\n");

    new SolutionListOutput(population)
        .setVarFileOutputContext(new DefaultFileOutputContext("VAR.csv", ","))
        .setFunFileOutputContext(new DefaultFileOutputContext("FUN.csv", ","))
        .print();

    JMetalLogger.logger.info("Random seed: " + JMetalRandom.getInstance().getSeed());
    JMetalLogger.logger.info("Objectives values have been written to file FUN.csv");
    JMetalLogger.logger.info("Variables values have been written to file VAR.csv");

    QualityIndicatorUtils.printQualityIndicators(
        SolutionListUtils.getMatrixWithObjectiveValues(population),
        VectorUtils.readVectors(referenceParetoFront, ","));
  }
}
