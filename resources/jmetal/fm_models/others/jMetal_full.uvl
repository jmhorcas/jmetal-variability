imports
    Crossovers

features
    jMetal
        mandatory
            Problem
                mandatory
                    Integer NumberOfVariables
                    Integer NumberOfObjectives
                    Integer NumberOfConstraints
                    String ProblemName
                optional
                    DynamicProblem
                optional
                    ProblemType {abstract}
                        alternative
                            BinaryProblem
                                mandatory
                                    Integer TotalNumberOfBits
                                    Integer NumberOfBitsPerVariable cardinality [1..*]
                                optional 
                                    FakeBinaryProblem
                            DoubleProblem
                                optional 
                                    FakeDoubleProblem
                                    ComposableDoubleProblem
                            IntegerProblem
                                optional 
                                    FakeIntegerProblem
                            PermutationProblem
                                optional
                                    FakeIntegerPermutationProblem
                            SequenceProblem
                    Integer Length
            Solution  // Encoding
                mandatory
                    SolutionType {abstract}
                        alternative
                            BinarySolution
                                optional
                                    DefaultBinarySolution
                            CompositeSolution
                            DoubleSolution
                                optional
                                    DefaultDoubleSolution
                                optional 
                                    RepairDoubleSolution
                                        alternative
                                            RepairDoubleSolutionWithBoundValue
                                            RepairDoubleSolutionWithOppositeBoundValue
                                            RepairDoubleSolutionWithRandomValue
                            IntegerSolution
                                optional
                                    DefaultIntegerSolution
                            PermutationSolution
                                optional
                                    IntegerPermutationSolution
                            PointSolution
                            SequenceSolution
                                optional
                                    CharSequenceSolution
            Algorithm
                mandatory
                    AlgorithmType {abstract}
                        alternative 
                            EvolutionaryAlgorithm
                                alternative 
                                    GeneticAlgorithm
                                        mandatory
                                            GeneticAlgorithmType {abstract}
                                                alternative
                                                    NSGAII {desc 'Nondominated Sorting Genetic Algorithm version II'}
                                                        optional
                                                            NSGAIIVersion
                                                                alternative 
                                                                    SteadyStateNSGAII {desc 'Steady-State NSGA-II'}
                                                                    NSGAIIMeasures {desc 'NSGA-II with measures'}
                                                                    DNSGAII {desc 'DIR based NSGA-II'}
                                                            Integer MatingPoolSize
                                                            Integer OffspringPopulationSize
                                                    NSGAIII
                                                    IBEA {desc 'Indicator Based Evolutionary Algorithm'}
                                                    MOEA
                                            Integer MaxPopulationSize {constraint MaxPopulationSize > 0}
                                    DifferentialEvolution
                                    EvolutionStrategy
                            LocalSearch
                            ScatterSearch
                            CoralReefsOptimization
                            ParticleSwarmOptimization
                    TerminationCondition
                        alternative
                            TerminationByEvaluations
                                mandatory
                                    Integer MaxNumberOfEvaluations {default 25000, constraint MaxNumberOfEvaluations >= 0}
                            TerminationByComputingTime
                                mandatory
                                    Integer MaxComputingTime {default 2500, unit 's', constraint MaxComputingTime >= 0}
                            TerminationByKeyboard
                            TerminationByQualityIndicator 
                                mandatory
                                    QualityIndicator {ToComplete}
                                    ReferenceFront {ToComplete}
                                    Real Percentage {constraint Percentage >= 0 & Percentage <= 1}
                                    Integer EvaluationsLimit {constraint EvaluationsLimit >= 0}
            Operator
                mandatory
                    Crossover
                        mandatory
                            CrossoverType {abstract}
                                alternative
                                    SBXCrossover
                                        mandatory
                                            Real CrossoverDistributionIndex {default 20.0, constraint CrossoverDistributionIndex >= 5.0 & CrossoverDistributionIndex <= 400.0}
                                    BLXAlphaCrossover
                                        mandatory
                                            Real BLXAlphaValue {default 0.5, constraint BLXAlphaValue >= 0.0 & BLXAlphaValue <= 1.0}
                                    WholeArithmeticCrossover
                                    HUXCrossover
                                    UniformCrossover
                                    SinglePointCrossover
                                    PMXCrossover
                                    CycleCrossover
                                    OXDCrossover
                                    PositionBasedCrossover
                                    EdgeRecombinationCrossover
                            Real CrossoverProbability {constraint CrossoverProbability >= 0.0 & CrossoverProbability <= 1.0}
                    Mutation
                        mandatory
                            MutationType {abstract}
                                alternative
                                    UniformMutation
                                    NonUniformMutation
                                        mandatory
                                            Integer MaxIterations {constraint MaxIterations >= 0}
                                    PolynomialMutation
                                    LinkedPolynomialMutation
                                    BitFlipMutation
                                    PermutationSwapMutation
                                    DisplacementMutation
                                    InsertMutation
                                    ScrambleMutation
                                    InversionMutation
                                    SimpleInversionMutation
                            Real MutationProbability {constraint MutationProbability >= 0.0 & MutationProbability <= 2.0}
                        optional
                            Real MutationPerturbation {constraint MutationPerturbation >= 0.0 & MutationPerturbation <= 1.0}
                            Real MutationDistributionIndex {constraint MutationDistributionIndex >= 5.0 & MutationDistributionIndex <= 400.0}
                    Selection
                        alternative
                            RandomSelection
                            NaryRandomSelection
                            NaryTournamentSelection
                                mandatory
                                    Integer TournamentSize
                            BinaryTournamentSelection
                            PopulationAndNeighborhoodSelection  // incomplete
constraints
    MaxEvaluations > 0
    TournamentSize >= 2 & TournamentSize <= 10
    // Mutation constraints
    (UniformMutation | NonUniformMutation) <=> MutationPerturbation
    (PolynomialMutation | LinkedPolynomialMutation) <=> MutationDistributionIndex
    
    
    FakeBinaryProblem => NumberOfObjectives == 2
    FakeBinaryProblem => NumberOfConstraints == 0
    FakeBinaryProblem => ProblemName == "Fake binary problem" 
    FakeIntegerPermutationProblem => ProblemName == "FakeIntegerPermutationProblem"
    FakeIntegerPermutationProblem => NumberOfConstraints == 0
    Length <=> (PermutationProblem | SequenceProblem)
    DoubleProblem => SBXCrossover | BLXAlphaCrossover | WholeArithmeticCrossover
    DoubleProblem => PolynomialMutation | LinkedPolynomialMutation | UniformMutation | NonUniformMutation
    BinaryProblem => HUXCrossover | SinglePointCrossover | UniformCrossover
    BinaryProblem => BitFlipMutation
    PermutationProblem => PMXCrossover | CycleCrossover | OXDCrossover | PositionBasedCrossover | EdgeRecombinationCrossover
    PermutationProblem => PermutationSwapMutation | DisplacementMutation | InsertMutation | ScrambleMutation | InversionMutation | SimpleInversionMutation
    DoubleProblem <=> DoubleSolution
    IntegerProblem <=> IntegerSolution
    BinaryProblem <=> BinarySolution
    PermutationProblem <=> PermutationSolution
    SequenceProblem <=> SequenceSolution
    BitFlipMutation => MutationProbability == MutationProbability / TotalNumberOfBits
    MatingPoolSize <=> (NSGAII | NSGAIIMeasures | DNSGAII)
    OffspringPopulationSize <=> (NSGAII | NSGAIIMeasures | DNSGAII)